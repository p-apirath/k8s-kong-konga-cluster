# ##### Cassandra LoadBalancer Service #####
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: cassandra-lb
#   labels:
#     app: cassandra-lb
#   namespace: kong-cluster
# spec:
#   type: LoadBalancer
#   loadBalancerSourceRanges:
#   - 0.0.0.0/0
#   ports:
#   - name: cassandra-lb
#     port: 19042
#     targetPort: 9042
#     protocol: TCP
#   selector:
#     app: cassandra

##### Cassandra Service #####
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
  namespace: kong-cluster
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra

##### Cassandra StatefulSet Template #####
---
apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: cassandra
  namespace: kong-cluster
spec:
  serviceName: cassandra
  replicas: 3
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      containers:
      - name: cassandra
        image: gcr.io/google-samples/cassandra:v13
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
           cpu: "500m"
           memory: 1Gi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "PID=$(pidof java) && kill $PID && while ps -p $PID > /dev/null; do sleep 1; done"]
        env:
        - name: MAX_HEAP_SIZE
          value: 512M
        - name: HEAP_NEWSIZE
          value: 128M
        - name: CASSANDRA_SEEDS
          value: "cassandra-0.cassandra.kong-cluster.svc.cluster.local,cassandra-1.cassandra.kong-cluster.svc.cluster.local,cassandra-2.cassandra.kong-cluster.svc.cluster.local"
        - name: CASSANDRA_CLUSTER_NAME
          value: "K8sCassandra"
        - name: CASSANDRA_DC
          value: "DataCenter-K8s"
        - name: CASSANDRA_RACK
          value: "K8sRack-KongDB"
        - name: CASSANDRA_AUTO_BOOTSTRAP
          value: "false"
        - name: CASSANDRA_USER
          value: "kong"
        - name: CASSANDRA_PASSWORD
          value: "kong"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        ### These volume mounts are persistent. They are like inline claims,
        ### but not exactly because the names need to match exactly one of
        ### the stateful pod volumes.
        volumeMounts:
        - name: cassandra-data
          mountPath: /cassandra_data
  ### These are converted to volume claims by the controller
  ### and mounted at the paths mentioned above.
  ### do not use these in production until ssd GCEPersistentDisk or other ssd pd
  ### https://kubernetes.io/docs/concepts/storage/storage-classes
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
      annotations:
        volume.beta.kubernetes.io/storage-class: gcp-storage
    spec:
      ### https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
      accessModes: [ "ReadWriteOnce" ]
      # accessModes: [ "ReadOnlyMany" ]
      # accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: 1Gi
